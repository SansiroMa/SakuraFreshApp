import React from 'react';
import { StyleSheet, Image, Text, View ,Alert} from 'react-native';
import { WebBrowser } from 'expo';
import { Ionicons } from '@expo/vector-icons';
import Touchable from 'react-native-platform-touchable';
import Timeline from 'react-native-timeline-listview'
import PopupDialog, { DialogTitle } from 'react-native-popup-dialog';
import { Button,Icon  } from 'react-native-elements';
import { Constants, BarCodeScanner, Permissions } from 'expo';

export default class Example extends React.Component {
  constructor(){
    super()
    this.onEventPress = this.onEventPress.bind(this)
    this.renderSelected = this.renderSelected.bind(this)
    this.renderDetail = this.renderDetail.bind(this)

    this.data = [
      {
        time: '09:00', 
        title: 'Farm Tomato First San', 
        description: 'At Sakura, weâ€™re on a mission to change the food system for the better. Ultimately, everything we do starts with our farmers. ',
        lineColor:'#009688', 
        // icon: require('../img/archery.png'),
        imageUrl: 'https://www.veseys.com/media/catalog/product/cache/image/700x700/e9c3970ab036de70892d86c6d221abfe/b/i/bigbeeftomato-bigbeeftomato-image-big%20beef%20tomato.jpeg'
      },
      {
        time: '10:45', 
        title: 'Pack House Scanning', 
        description: 'We have a colour camera system and internal defect recognition. This helps to ensure we always meet customer specifications and expectations.', 
        // icon: require('../img/badminton.png'),
        imageUrl: 'http://www.affinitus.co.uk/wp-content/uploads/2016/05/freshware-testimonials-image-row-682x340.jpg'
      },
      {
        time: '12:00', 
        title: 'Pack Finished', 
        description: 'We can offer the Competition in various small packages suitable for retail, as well as the standard 3 kg packaging in their own box and wooden crate.', 
        // icon: require('../img/badminton.png'),
        imageUrl: 'http://www.agf.nl/nieuws/2014/0528/tomaatjes2.jpg'
 
      },
      {
        time: '14:00', 
        title: 'Logistic', 
        description: 'We offer you flexibility, speed and quality service and covers Supply Chain Management.',
        lineColor:'#009688', 
        // icon: require('../img/soccer.png'),
        imageUrl: 'https://www.cargowayslogistics.net/wp-content/uploads/img-homepage-half-section-global-logistics.jpg'
      },
      {
        time: '16:30', 
        title: 'Retailer', 
        description: 'We offer retailers a comprehensive assortment of fresh cut as well as whole fruit and vegetable products.', 
        // icon: require('../img/dumbbell.png'),
        imageUrl: 'https://ordineazilei.ro/wp-content/uploads/2018/06/retail.jpg'
      },
      {
        time: '18:30', 
        title: 'Consumer', 
        description: 'Marinated Tomato Salad with Herbs.', 
        // icon: require('../img/dumbbell.png'),
        imageUrl: 'https://food.fnr.sndimg.com/content/dam/images/food/fullset/2011/11/14/2/WU-0101_tomato-salad_s4x3.jpg.rend.hgtvcom.616.462.suffix/1382541191866.jpeg'
      }
    ]
    this.state = 
    {
      selected: null,
      time: null,
      title: null,
      description: null,
      imageUrl:' ',
      barCode:null,
      hasCameraPermission: null,
      showBarCodeReader: false,
    };

    this.handleConfirm = this.handleConfirm.bind(this);
    this.handleReport = this.handleReport.bind(this);
    // this._requestCameraPermission = this._requestCameraPermission.bind(this);
    this._handleScanButtonClick = this._handleScanButtonClick.bind(this);
    this._handleCancelScanButtonClick = this._handleCancelScanButtonClick.bind(this);
  } 

  // componentDidMount() {
  //   this._requestCameraPermission();
  // }

    // When ScanBarCode button is clicked 
  _handleScanButtonClick()
    {

      if(this.state.hasCameraPermission == null || this.state.hasCameraPermission == false )
      {
        this._requestCameraPermission();
      }
      else
      {
        this.setState({
          showBarCodeReader: true,
        });
      }
    }

  _requestCameraPermission = async () => {
    const { status } = await Permissions.askAsync(Permissions.CAMERA);

    if(status == 'granted' )
    {
      this.setState({
        showBarCodeReader: true,
        hasCameraPermission: true,
      });
    }
    else{
      this.setState({
        hasCameraPermission: false,
      });
    }

  };

  _handleBarCodeRead = data => {
    Alert.alert(
      'Scan successful!',
      JSON.stringify(data)
    );

    this.setState({
      showBarCodeReader: false,
      barCode:data,
    });
  };

  // When confirm button is clicked 
  _handleCancelScanButtonClick()
  {
    this.setState({
      showBarCodeReader: false,
    });
  }

  // When timeline item is clicked
  onEventPress(data){
    this.setState({
      selected: data,
      time: data.time,
      title: data.title,
      description: data.description,
      imageUrl: data.imageUrl})
    
      this.popupDialog.show();
  }
  
  // When confirm button is clicked 
  handleConfirm()
  {
    this.popupDialog.dismiss();
  }

  // when Report button is clicked
  handleReport()
  {
    this.popupDialog.dismiss();
  }

  // When timeline item is clicked
  renderSelected(){
      if(this.state.selected)
        return <Text style={{marginTop:10}}>Selected event: {this.state.selected.title} at {this.state.selected.time}</Text>
  }

  renderDetail(rowData, sectionID, rowID) {
    let title = <Text style={[styles.title]}>{rowData.title}</Text>
    var desc = null
    if(rowData.description && rowData.imageUrl)
      desc = (
        <View style={styles.descriptionContainer}>   
          <Image source={{uri: rowData.imageUrl}} style={styles.image}/>
          <Text style={[styles.textDescription]}>{rowData.description}</Text>
        </View>
      )
    
    return (
      <View style={{flex:1}}>
        {title}
        {desc}
      </View>
    )
  }

  render() {

    let visibleButton;

    let scanButton = (
      <View style={styles.messagecontainer}>
             <Button
          icon={{name: 'barcode', type: 'font-awesome'}}
          buttonStyle={styles.scanButtonStyleTimelinePage}
          onPress={this._handleScanButtonClick}
          title='Scan Bar Code' />
      </View>
    )

   let cancelScanButton = (
      <View style={styles.messagecontainer}>
        <Button
        icon={{name: 'ban', type: 'font-awesome'}}
        buttonStyle={styles.cancelScanButtonStyleTimelinePage}
        onPress={this._handleCancelScanButtonClick}
        title='Cancel' />
      </View>
    ) 

    if(this.state.showBarCodeReader == false){
      visibleButton = scanButton;
    }
    else{
      visibleButton = cancelScanButton;
    }

    let timeLineBody;

    if(this.state.hasCameraPermission == null)
    {
      timeLineBody = (
        <View style={styles.messagecontainer}>
          <Text>Requesting for camera permission</Text>
        </View>
      )      

    }
    else if(this.state.hasCameraPermission == false)
    {
      timeLineBody =   (
        <View style={styles.messagecontainer}>
            <Text>Camera permission is not granted</Text>
        </View>
      )

    }
    else if(this.state.showBarCodeReader == true)
    {
      timeLineBody =  (
        <View style={styles.barCodeReadercontainer}>
            <BarCodeScanner
              onBarCodeRead={this._handleBarCodeRead}
              style={{ height: 200, width: 400 }}
            />
        </View>
      ) 
    }
    // else if(this.state.barCode == null)
    // {
    //   Alert.alert(
    //     'barCode null!'
    //   );
    //   timeLineBody =  (
    //     <View style={styles.container}>
    //         <Text>No Data</Text>
    //     </View>
    //   ) 
    // }
    else
    {
      timeLineBody = (
          <View style={styles.timeLinecontainer}>
            <PopupDialog
              dialogTitle={<DialogTitle title={this.state.title} />}
              ref={(popupDialog) => { this.popupDialog = popupDialog; }}
            >
              {/* <View>
                <Text>{this.state.description} </Text>
              </View> */}

              <View style = {styles.containerDetailPage}>   
                <Image source={{uri: this.state.imageUrl}} style={styles.imageDetailPage}/>
                <View  style = {styles.rightContainerDetailPage}>
                  <Text style={[styles.textTimeDetailPage]}>Time: {this.state.time}</Text>
                  <Text style={[styles.textDescriptionDetailPage]}>{this.state.description}</Text>
                </View>

              </View>

              <View style = {styles.buttonContainerDetailPage}> 

                <Button
                    icon={{name: 'envelope', type: 'font-awesome'}}
                    buttonStyle={styles.reportButtonStyleDetailPage}
                    onPress={this.handleReport}
                    title='Report' />
                <Button
                    icon={{name: 'check-circle', type: 'font-awesome'}}
                    buttonStyle={styles.confirmButtonStyleDetailPage}
                    onPress={this.handleConfirm}
                    title='Confirm' />
              </View>   
            </PopupDialog>

            {/* {this.renderSelected()} */}
            
            <Timeline 
              style={styles.list}
              data={this.data}
              circleSize={20}
              // circleColor='rgba(0,0,0,0)'
              circleColor='rgb(45,156,219)'
              lineColor='rgb(45,156,219)'
              timeContainerStyle={{minWidth:52, marginTop: -5}}
              timeStyle={{textAlign: 'center', backgroundColor:'#ff9797', color:'white', padding:5, borderRadius:13}}
              descriptionStyle={{color:'gray'}}
              options={{
                style:{paddingTop:5}
              }}
              innerCircle={'dot'}
              onEventPress={this.onEventPress}
              renderDetail={this.renderDetail}
            />
        </View>

      )
        
    }

    return (
        <View  style={styles.container}>
              {visibleButton}
              {timeLineBody}
        </View>

    );
  }
}


const styles = StyleSheet.create({
  container: {
    flex: 1,
    // paddingTop:20,
    paddingRight: 0,
    backgroundColor:'white'
  },
  barCodeReadercontainer: {
    flex: 1,
    paddingTop:20,
    paddingRight: 0,
    backgroundColor:'white'
  },
  timeLinecontainer: {
    flex: 1,
    padding: 10,
    paddingTop:20,
    paddingRight: 0,
    backgroundColor:'white'

  },
  messagecontainer: {
    // flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    // paddingTop: Constants.statusBarHeight,
    backgroundColor: '#ecf0f1',

  },

  list: {
    flex: 1,
    marginTop:20,
  },
  title:{
    fontSize:16,
    fontWeight: 'bold'
  },
  descriptionContainer:{
    flexDirection: 'row',
    paddingRight: 50
  },
  image:{
    width: 50,
    height: 50,
    borderRadius: 25
  },
  textDescription: {
    marginLeft: 10,
    color: 'gray'
  },

  containerDetailPage:
  {
    flexDirection: 'row',
    backgroundColor:'white'
  },
  imageDetailPage:{
    width: 100,
    height: 100,
    borderRadius: 50,
    marginTop:5
  },
  rightContainerDetailPage:
  {
    flexDirection: 'column',
    backgroundColor:'white'
  },

  textDescriptionDetailPage: {
    marginLeft: 5,
    marginTop:5,
    color: 'gray',
    marginRight: 100,
  },

  textTimeDetailPage: {
    marginLeft: 5,
    marginTop:5,
    color: 'gray',
    marginRight: 100,
    fontWeight: 'bold',
    fontSize: 20,
  },

  buttonContainerDetailPage:
  {
    marginLeft: 45,
    flexDirection: 'row',
    backgroundColor:'white',
    justifyContent: 'center', 
    alignItems: 'center',
    position: 'absolute',
    bottom: 10
  },
  reportButtonStyleDetailPage:
  {
    height: 40, 
    width: 120, 
    backgroundColor: 
    '#ff9797', 
    borderRadius: 5 
  },
  confirmButtonStyleDetailPage:
  {
    height: 40, 
    width: 120, 
    backgroundColor: 
    'rgba(111, 202, 186, 1)', 
    // alignItems: 'right',
    // position: 'absolute',
    borderRadius: 5 
  },
  scanButtonStyleTimelinePage:
  {
    height: 40, 
    width: 150, 
    backgroundColor: 
    'rgba(111, 202, 186, 1)', 
    // alignItems: 'right',
    // position: 'absolute',
    borderRadius: 5 
  },

  cancelScanButtonStyleTimelinePage:
  {
    height: 40, 
    width: 150, 
    backgroundColor: 
    '#ff9797', 
    // alignItems: 'right',
    // position: 'absolute',
    borderRadius: 5 
  }

});